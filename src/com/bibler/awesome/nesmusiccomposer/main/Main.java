package com.bibler.awesome.nesmusiccomposer.main;

import com.bibler.awesome.nesmusiccomposer.audio.APU;
import com.bibler.awesome.nesmusiccomposer.audio.MusicStream;
import com.bibler.awesome.nesmusiccomposer.audio.Song;
import com.bibler.awesome.nesmusiccomposer.systems.ClockRunner;
import com.bibler.awesome.nesmusiccomposer.systems.SongManager;
import com.bibler.awesome.nesmusiccomposer.ui.MainFrame;
import com.bibler.awesome.nesmusiccomposer.ui.PianoRoll;
import com.bibler.awesome.nesmusiccomposer.utils.MusicStreamCreator;

public class Main {
	
	private static float tempo = 0x3C;
	
	public static void main(String[] args) {
		MusicStream square1 = MusicStreamCreator.createMusicStream(new int[] {
				0x83, 0x29, 0x87, 0x28, 0x81, 0x26,
				0x88, 0x24, 0x82, 0x22, 0x83, 0x21,
				0x1F, 0x88, 0x1D, 0x82, 0x24, 0x88,
				0x26, 0x82, 0x26, 0x88, 0x28, 0x82,
				0x28, 0x88, 0x29, 0x82, 0x5E, 0x82,
				0x29, 0x29, 0x28, 0x26, 0x24, 0x87,
				0x24, 0x81, 0x22, 0x82, 0x21, 0x29,
				0x29, 0x28, 0x26, 0x24, 0x87, 0x24,
				0x81, 0x22, 0x82, 0x21, 0x21, 0x21,
				0x21, 0x21, 0x81, 0x21, 0x22, 0x88,
				0x24, 0x81, 0x22, 0x21, 0x82, 0x1F,
				0x1F, 0x1F, 0x81, 0x1F, 0x21, 0x88,
				0x22, 0x81, 0x21, 0x1F, 0x82, 0x1D,
				0x83, 0x29, 0x82, 0x26, 0x87, 0x24,
				0x81, 0x22, 0x82, 0x21, 0x22, 0x83,
				0x21, 0x1F, 0x84, 0x1D
		}, 0);
        MusicStream square2 = MusicStreamCreator.createMusicStream(new int[] {
        		0x83, 0x11, 0x87, 0x11, 0x81, 0x11, 0x88, 0x11, 0x82, 0x0A, 
        		0x83, 0x0C, 0x0C, 0x88, 0x11, 0x82, 0x15, 0x88, 0x16, 0x82, 
        		0x16, 0x88, 0x18, 0x82, 0x18, 0x88, 0x11, 0x82, 0x5E, 0x82, 
        		0x11, 0x83, 0x11, 0x11, 0x88, 0x11, 0x82, 0x11, 0x83, 0x11, 
        		0x11, 0x88, 0x11, 0x82, 0x5E, 0x88, 0x5E, 0x82, 0x11, 0x11, 
        		0x11, 0x11, 0x11, 0x88, 0x18, 0x82, 0x0C, 0x0C, 0x0C, 0x0C, 
        		0x0C, 0x88, 0x11, 0x82, 0x11, 0x88, 0x11, 0x82, 0x0A, 0x83, 
        		0x0C, 0x0C, 0x84, 0x11
        }, 1);
		MusicStream tri = MusicStreamCreator.createMusicStream(new int[] {
				0x83, 0x21, 0x87, 0x24, 0x81, 0x22, 0x88, 0x21, 0x82, 0x1F, 0x83, 
				0x1D, 0x1C, 0x88, 0x1D, 0x82, 0x1D, 0x88, 0x22, 0x82, 0x22, 0x88, 
				0x1F, 0x82, 0x1F, 0x88, 0x21, 0x82, 0x5E, 0x82, 0x21, 0x21, 0x24, 
				0x22, 0x21, 0x87, 0x21, 0x81, 0x1F, 0x82, 0x1D, 0x21, 0x21, 0x24, 
				0x22, 0x21, 0x87, 0x21, 0x81, 0x1F, 0x82, 0x1D, 0x1D, 0x1D, 0x1D, 
				0x1D, 0x81, 0x1D, 0x1F, 0x88, 0x21, 0x81, 0x1F, 0x1D, 0x82, 0x1C, 
				0x1C, 0x1C, 0x81, 0x1C, 0x1D, 0x88, 0x1F, 0x81, 0x1D, 0x1C, 0x82, 
				0x1D, 0x83, 0x21, 0x82, 0x22, 0x87, 0x21, 0x81, 0x1F, 0x82, 0x1D, 
				0x1F, 0x83, 0x1D, 0x1C, 0x84, 0x1D
		}, 2);
		
		PianoRoll roll = new PianoRoll();
		roll.addStream(square1);
		roll.addStream(square2);
		roll.addStream(tri);
		
		MainFrame frame = new MainFrame();
		frame.getPianoRollView().setPianoRoll(roll);
		
		Song song = new Song();
		song.addStream(square1);
		song.addStream(square2);
		song.addStream(tri);
		//song.addStream(metronome);
		APU apu = new APU();
		square1.setStream(apu.getChannel(0));
		square2.setStream(apu.getChannel(1));
		tri.setStream(apu.getChannel(2));
		//metronome.setStream(apu.getChannel(4));
		apu.getChannel(0).setDuty(2);
		apu.getChannel(1).setDuty(1);
		//apu.getChannel(4).setDuty(2);
		apu.setSong(song);
		ClockRunner runner = new ClockRunner();
		runner.setAPU(apu);
		song.setMainFrame(frame);
		
		SongManager manager = new SongManager(runner, apu);
		manager.setCurrentSong(song);
		frame.getToolbar().registerObjectToNotify(manager);

	}

}
